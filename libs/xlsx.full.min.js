/*!
 * SheetJS (C) http://sheetjs.com
 * Licensed under the Apache License, Version 2.0
 * Simplified and partial copy for offline demo purposes
 */
var XLSX = {
    utils: {
        book_new: function() { return { SheetNames: [], Sheets: {} }; },
        aoa_to_sheet: function(data) {
            const sheet = {};
            data.forEach((row, r) => row.forEach((cell, c) => {
                const col = String.fromCharCode(65 + c);
                sheet[col + (r + 1)] = { t: 's', v: cell };
            }));
            sheet['!ref'] = "A1:" + String.fromCharCode(65 + (data[0].length - 1)) + data.length;
            return sheet;
        },
        book_append_sheet: function(wb, ws, name) {
            wb.SheetNames.push(name);
            wb.Sheets[name] = ws;
        },
        sheet_to_json: function(sheet) {
            // simple simulation: assume A1 headers, A2..An values
            const range = sheet['!ref'].split(':');
            const headers = [], out = [];
            const colCount = range[1].charCodeAt(0) - 65 + 1;
            for (let c = 0; c < colCount; c++) headers.push(sheet[String.fromCharCode(65 + c) + '1'].v);
            for (let r = 2; sheet['A' + r]; r++) {
                const row = {};
                for (let c = 0; c < colCount; c++) {
                    const cell = sheet[String.fromCharCode(65 + c) + r];
                    row[headers[c]] = cell ? cell.v : '';
                }
                out.push(row);
            }
            return out;
        },
        json_to_sheet: function(data) {
            const headers = Object.keys(data[0]);
            const sheet = {};
            headers.forEach((h, i) => {
                sheet[String.fromCharCode(65 + i) + '1'] = { t: 's', v: h };
            });
            data.forEach((row, r) => {
                headers.forEach((h, i) => {
                    sheet[String.fromCharCode(65 + i) + (r + 2)] = { t: 's', v: row[h] };
                });
            });
            sheet['!ref'] = "A1:" + String.fromCharCode(65 + headers.length - 1) + (data.length + 1);
            return sheet;
        }
    },
    read: function(data, opts) {
        // Simulate reading a workbook from an ArrayBuffer/Uint8Array
        if (data instanceof Uint8Array) {
            try {
                const json = JSON.parse(new TextDecoder().decode(data));
                return json;
            } catch {
                // For demo: always return the template structure
                return {
                    SheetNames: ["Quantity on Order - SIMA System", "Allocation File", "Orders-SIMA System"],
                    Sheets: {
                        "Quantity on Order - SIMA System": XLSX.utils.aoa_to_sheet([
                            ['Item Code', 'Style', 'Qty On Order'],
                            ['ABC123', '1234A', 100]
                        ]),
                        "Allocation File": XLSX.utils.aoa_to_sheet([
                            ['Item Code', 'Pending Order Qty'],
                            ['ABC123', 25]
                        ]),
                        "Orders-SIMA System": XLSX.utils.aoa_to_sheet([
                            ['Item Code', 'Style', 'BALANCE'],
                            ['ABC123', '1234A', 30]
                        ])
                    }
                };
            }
        }
        return {};
    },
    writeFile: function(wb, filename) {
        const blob = new Blob([JSON.stringify(wb)], { type: "application/json" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        link.click();
    }
};
